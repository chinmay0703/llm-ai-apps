# -*- coding: utf-8 -*-
"""üìùResume Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xX4nST8PbYW_ry5p7t5dyNPWpgU3zUlo
"""

!apt update && apt install -y curl git

!curl -fsSL https://ollama.com/install.sh | sh

!ollama pull llama3

!pkill -f ngrok  # Kills all ngrok processes
!fuser -k 8501/tcp  # Kills any process using port 6000 (or use 5000 if needed)
# Install required libraries
OLLAMA_API_URL = "http://127.0.0.1:11434"
!nohup ollama serve > /dev/null 2>&1 &

!pip install streamlit PyPDF2 requests python-docx

!pip install pyngrok

from pyngrok import ngrok

# Replace with your ngrok auth token
NGROK_AUTH_TOKEN = "2WG8G2YZNV9jofWBKu5B2E6hA3Q_719vVw9PLU1SwQLwCtcNd"

# Set authentication token
ngrok.set_auth_token(NGROK_AUTH_TOKEN)
print("‚úÖ ngrok Auth Token Set!")

public_url = ngrok.connect(8501).public_url
print(f"üöÄ Streamlit App is running at: {public_url}")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile resume_analyzer.py
# import streamlit as st
# import PyPDF2
# import requests
# import tempfile
# import os
# 
# OLLAMA_URL = "http://127.0.0.1:11434/api/generate"
# 
# st.set_page_config(page_title="Resume Analyzer", layout="wide")
# st.title("üìÑ Resume Analyzer - AI Job Compatibility Checker")
# st.caption("Upload a resume and enter a job description to analyze compatibility!")
# 
# uploaded_file = st.file_uploader("üìÇ Upload Your Resume (PDF)", type=["pdf"])
# job_description = st.text_area("üìë Enter Job Description", height=150)
# 
# def extract_text_from_pdf(pdf_path):
#     text = ""
#     with open(pdf_path, "rb") as f:
#         reader = PyPDF2.PdfReader(f)
#         for page in reader.pages:
#             text += page.extract_text() or ""
#     return text.strip()
# 
# if uploaded_file and job_description:
#     st.success(f"‚úÖ Uploaded: {uploaded_file.name}")
#     with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
#         temp_file.write(uploaded_file.read())
#         temp_pdf_path = temp_file.name
# 
#     resume_text = extract_text_from_pdf(temp_pdf_path)
#     os.remove(temp_pdf_path)
# 
#     if resume_text:
#         st.info("üìÑ Resume extracted successfully!")
#         ollama_payload = {
#     "model": "llama3",
#     "prompt": f"""
#     You are an expert HR recruiter analyzing a candidate's resume for job compatibility.
# 
#     **Task:** Compare the following resume with the given job description and perform the following analysis:
# 
#     **Resume Details:**
#     {resume_text}
# 
#     **Job Description Details:**
#     {job_description}
# 
#     **Analysis Criteria:**
#     1Ô∏è‚É£ **Experience Check**:
#        - Extract the **years of experience required** from the job description.
#        - Identify the **candidate‚Äôs total years of experience** from the resume.
#        - Check if the experience level **matches the requirement**.
# 
#     2Ô∏è‚É£ **Skills Match**:
#        - Extract the **required technical & soft skills** from the job description.
#        - Match them against the skills listed in the resume.
#        - Identify **missing or underrepresented skills**.
# 
#     3Ô∏è‚É£ **Qualification & Certification Alignment**:
#        - Extract the **required qualifications, degrees, and certifications**.
#        - Verify if the resume includes them.
#        - Highlight **missing qualifications**.
# 
#     4Ô∏è‚É£ **Industry & Job Role Fit**:
#        - Compare the **industries and job roles** from the resume with the job description.
#        - Identify **alignment or mismatches** in domain expertise.
# 
#     5Ô∏è‚É£ **Overall Suitability & Score**:
#        - Assign a **compatibility score** (High/Medium/Low) with reasoning.
#        - Provide **recommendations** for improving the resume to match the job better.
# 
#     **Final Output Format:**
#     - **Experience Match**: ‚úÖ/‚ùå with explanation
#     - **Skills Match**: ‚úÖ/‚ùå with missing skills listed
#     - **Qualification Match**: ‚úÖ/‚ùå with missing details
#     - **Industry Fit**: ‚úÖ/‚ùå with comments
#     - **Compatibility Score**: High/Medium/Low
#     - **Suggestions for improvement**: Bullet points
# 
#     Please provide a structured response in **clear sections**.
#     """,
#     "stream": False
# }
# 
#         response = requests.post(OLLAMA_URL, json=ollama_payload)
#         result = response.json().get("response", "‚ö†Ô∏è No response from Llama 3.")
#         st.subheader("üìå Compatibility Analysis:")
#         st.write(result)
#

!streamlit run resume_analyzer.py &

