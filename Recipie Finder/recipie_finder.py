# -*- coding: utf-8 -*-
"""Recipie Finder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FiksPvmYV78ElcHEVndeMuffKGiNOxfa
"""

!apt update && apt install -y curl git

!curl -fsSL https://ollama.com/install.sh | sh

!ollama pull llama3

!pkill -f ngrok  # Kills all ngrok processes
!fuser -k 8501/tcp  # Kills any process using port 6000 (or use 5000 if needed)
# Install required libraries
OLLAMA_API_URL = "http://127.0.0.1:11434"
!nohup ollama serve > /dev/null 2>&1 &

!pip install streamlit PyPDF2 requests python-docx

!pip install pyngrok

from pyngrok import ngrok

# Replace with your ngrok auth token
NGROK_AUTH_TOKEN = "2WG8G2YZNV9jofWBKu5B2E6hA3Q_719vVw9PLU1SwQLwCtcNd"

# Set authentication token
ngrok.set_auth_token(NGROK_AUTH_TOKEN)
print("✅ ngrok Auth Token Set!")

public_url = ngrok.connect(8501).public_url
print(f"🚀 Streamlit App is running at: {public_url}")

import requests

OLLAMA_API_URL = "http://127.0.0.1:11434/api/generate"

headers = {"Content-Type": "application/json"}
payload = {
    "model": "llama3",
    "prompt": "What is the capital of France?",
    "stream": False
}

response = requests.post(OLLAMA_API_URL, json=payload, headers=headers)

if response.status_code == 200:
    print("✅ Response from Ollama:", response.json()["response"])
else:
    print(f"❌ Error from Ollama: {response.status_code}, {response.text}")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import requests
# from bs4 import BeautifulSoup
# from googlesearch import search
# 
# # Streamlit UI Setup
# st.set_page_config(page_title="Recipe Finder", layout="wide")
# st.title("🍽️ Recipe Finder - Get Recipes Using Your Ingredients")
# st.caption("Enter ingredients you have, and get the best recipes!")
# 
# # User Input for Ingredients
# ingredients = st.text_input("📝 Enter Ingredients (comma-separated)", placeholder="e.g., chicken, garlic, onion, tomato")
# 
# def get_recipe_links(ingredients):
#     """Searches Google for the top 5 recipe websites based on ingredients"""
#     query = f"recipes with {ingredients}"
#     try:
#         return list(search(query, num=5, stop=5, pause=2))
#     except Exception as e:
#         return ["Error fetching recipes: " + str(e)]
# 
# if ingredients:
#     st.info("🔍 Searching for recipes...")
#     recipe_links = get_recipe_links(ingredients)
# 
#     if "Error" in recipe_links[0]:
#         st.error(recipe_links[0])
#     else:
#         st.success("✅ Found top 5 recipes!")
#         for i, link in enumerate(recipe_links, start=1):
#             st.markdown(f"### 🍽️ Recipe {i}: [View Recipe]({link})")
# 
# st.markdown("---")
# st.caption("Powered by Google Search & Web Scraping 🍽️")
#

!streamlit run app.py &

